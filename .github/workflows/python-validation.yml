name: Python Validation

on:
  push:
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
  pull_request:
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'

jobs:
  # Setup job to install dependencies and prepare validation scripts
  setup:
    runs-on: ubuntu-latest
    name: Setup Environment
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: pip install -r requirements-dev.txt

    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=deps-${{ hashFiles('requirements-dev.txt') }}" >> $GITHUB_OUTPUT

  # Individual validation jobs that can fail independently
  python-linting:
    runs-on: ubuntu-latest
    name: Python Linting
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: pip install -r requirements-dev.txt

    - name: Lint with Ruff
      run: |
        echo "üîç Running Python linting with Ruff..."

        if ruff check --output-format=github; then
          echo "‚úÖ Python linting completed successfully"
        else
          echo "‚ùå Python linting failed"
          echo "::error::Python linting validation failed"
          exit 1
        fi

  python-testing:
    runs-on: ubuntu-latest
    name: Python Testing
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: pip install -r requirements-dev.txt

    - name: Test Python
      run: |
        echo "üß™ Running Python tests..."

        if pytest --junitxml=junit/test-results.xml; then
          echo "‚úÖ Python tests completed successfully"
        else
          echo "‚ùå Python tests failed"
          echo "::error::Python test validation failed"
          exit 1
        fi

  # Summary job that requires all other jobs but doesn't fail
  validation-summary:
    runs-on: ubuntu-latest
    name: Validation Summary
    needs: [python-linting, python-testing]
    if: always()
    steps:
    - name: Generate Summary
      run: |
        echo "üìã Python Validation Summary:"
        echo ""

        # Check individual job results
        lint_result="${{ needs.python-linting.result }}"
        test_result="${{ needs.python-testing.result }}"

        overall_success=true

        if [ "$lint_result" = "success" ]; then
          echo "  ‚úÖ Python linting validation"
        else
          echo "  ‚ùå Python linting validation ($lint_result)"
          overall_success=false
        fi

        if [ "$test_result" = "success" ]; then
          echo "  ‚úÖ Python test validation"
        else
          echo "  ‚ùå Python test validation ($test_result)"
          overall_success=false
        fi

        echo ""
        if [ "$overall_success" = "true" ]; then
          echo "üéâ All Python validations passed!"
        else
          echo "üí• Some Python validations failed. Check individual job details above."
          exit 1
        fi