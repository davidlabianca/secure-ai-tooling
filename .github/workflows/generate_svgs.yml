name: Generate Mermaid SVGs

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.mmd'
      - '**/*.mermaid'
      - '!**/*.svg'  # Explicitly exclude SVG files to prevent loops
      - '!**/node_modules/**'  # Exclude node_modules
      - '!**/.*/**'  # Exclude hidden directories

# Environment variables for configuration
env:
  MERMAID_PATH: ./risk-map/docs/
  SVGS_PATH: ./risk-map/svg
  MERMAID_THEME: neutral
  MERMAID_BACKGROUND: transparent
  COMMIT_MESSAGE_PREFIX: "üé® Auto-generate"

# Use minimal permissions by default
permissions:
  contents: read

jobs:
  generate-svgs:
    runs-on: ubuntu-latest
    name: Generate SVG Files
    # GITHUB_TOKEN commits won't trigger workflows by default
    if: |
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, 'Auto-generate')
    permissions:
      contents: write  # Need write permission only for this job
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ github.token }}  # Use default GITHUB_TOKEN
        fetch-depth: 0  # Fetch full history for accurate change detection

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '22.x'

    - name: Cache global npm packages
      uses: actions/cache@v4
      id: npm-cache
      with:
        path: |
          ~/.npm
          ~/.cache/puppeteer
        key: ${{ runner.os }}-npm-mermaid-cli-v11-${{ hashFiles('.github/workflows/generate-mermaid-svgs.yml') }}
        restore-keys: |
          ${{ runner.os }}-npm-mermaid-cli-v11-
          ${{ runner.os }}-npm-mermaid-cli-

    - name: Install Mermaid CLI globally
      run: |
        # Check if we have a cache hit
        if [ "${{ steps.npm-cache.outputs.cache-hit }}" == "true" ]; then
          echo "üì¶ Cache hit - verifying Mermaid CLI installation..."
        else
          echo "üì¶ Cache miss - installing Mermaid CLI..."
          npm install -g @mermaid-js/mermaid-cli@latest
        fi
        echo "Mermaid CLI version: $(npx mmdc --version)"

    - name: Setup Chrome for Puppeteer
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable
        install-dependencies: true

    - name: Validate directory structure
      run: |
        set -euo pipefail
        
        echo "üîç Checking directory structure..."
        
        if [ ! -d "${MERMAID_PATH}" ]; then
          echo "::warning::Directory ${MERMAID_PATH} does not exist"
          echo "‚ùå Directory ${MERMAID_PATH} does not exist - failing"
          exit 1
        fi
        
        echo "‚úÖ Directory ${MERMAID_PATH} exists"

    - name: Find and convert Mermaid files
      run: |
        set -euo pipefail
        
        echo "üé® Finding and converting Mermaid files..."

        # Create output directory
        mkdir -p ${SVGS_PATH}

        # Find all .mmd and .mermaid files (excluding node_modules and hidden directories)
        mapfile -t mermaid_files < <(find ${MERMAID_PATH} \
          -type f \
          \( -name "*.mmd" -o -name "*.mermaid" \) \
          -not -path "*/node_modules/*" \
          -not -path "*/.*/*" \
          2>/dev/null || true)

        if [ ${#mermaid_files[@]} -eq 0 ]; then
          echo "‚ö†Ô∏è  No Mermaid files found in ${MERMAID_PATH}"
          echo "no_changes=true" >> $GITHUB_ENV
          exit 0
        fi

        echo "üìä Found ${#mermaid_files[@]} Mermaid file(s) to process"

        conversion_count=0
        updated_files=0
        failed_files=0

        # Puppeteer config for better stability
        PUPPETEER_CONFIG_FILE=$(mktemp)
        echo '{"args": ["--no-sandbox", "--disable-setuid-sandbox", "--disable-dev-shm-usage"]}' > ${PUPPETEER_CONFIG_FILE}

        # Get list of changed files in this commit
        changed_files=$(git diff --name-only HEAD HEAD~1 2>/dev/null || true)

        # Convert each file
        for file in "${mermaid_files[@]}"; do
          echo "üìÑ Processing $file"
          
          # Generate SVG with same name but .svg extension
          output_file="${SVGS_PATH}/$(basename "$file" | sed 's/\.[^.]*$/.svg/')"
          
          # Check if source file was changed in this commit or output doesn't exist
          should_regenerate=false
          if [ ! -f "$output_file" ]; then
            echo "  ‚Üí SVG doesn't exist yet"
            should_regenerate=true
          elif echo "$changed_files" | grep -q "$(basename "$file")"; then
            echo "  ‚Üí Source file was modified in this commit"
            should_regenerate=true
          else
            # Use git to check if source is newer than last commit of output
            source_time=$(git log -1 --format="%at" -- "$file" 2>/dev/null || echo "0")
            output_time=$(git log -1 --format="%at" -- "$output_file" 2>/dev/null || echo "0")
            if [ "$source_time" -gt "$output_time" ]; then
              echo "  ‚Üí Source file is newer than SVG"
              should_regenerate=true
            fi
          fi
          
          if [ "$should_regenerate" = true ]; then
            echo "üîÑ Converting $(basename "$file")"
            
            if npx mmdc -i "$file" -o "$output_file" \
              -t "${MERMAID_THEME}" \
              -b "${MERMAID_BACKGROUND}" \
              -p "${PUPPETEER_CONFIG_FILE}"; then
              echo "‚úÖ Successfully converted $(basename "$file")"
              conversion_count=$((conversion_count + 1))
              updated_files=$((updated_files + 1))
            else
              echo "‚ùå Failed to convert $(basename "$file")"
              echo "::error file=$file::Failed to convert $file to SVG"
              failed_files=$((failed_files + 1))
            fi
          else
            echo "‚è≠Ô∏è  $(basename "$file") is up to date"
            conversion_count=$((conversion_count + 1))
          fi
        done

        # Clean up orphaned SVGs (SVGs without corresponding source files) except map.svg
        echo ""
        echo "üßπ Checking for orphaned SVG files..."
        orphaned_count=0

        for svg in ${SVGS_PATH}/*.svg; do
          if [ -f "$svg" ]; then
            base=$(basename "$svg" .svg)

            # Skip map.svg
            if [ "$base" = "map" ]; then
              continue
            fi

            # Check if corresponding source exists
            if ! find ${MERMAID_PATH} \
              \( -name "${base}.mmd" -o -name "${base}.mermaid" \) \
              -not -path "*/node_modules/*" \
              -not -path "*/.*/*" \
              2>/dev/null | grep -q .; then
              echo "üóëÔ∏è  Removing orphaned SVG: $(basename "$svg")"
              rm "$svg"
              orphaned_count=$((orphaned_count + 1))
              updated_files=$((updated_files + 1))
            fi
          fi
        done

        echo ""
        echo "üìä Summary:"
        echo "  - Processed: $conversion_count files"
        echo "  - Updated: $updated_files files"
        echo "  - Failed: $failed_files files"
        echo "  - Orphaned SVGs removed: $orphaned_count"
        
        # Set output for next step
        echo "updated_files=$updated_files" >> $GITHUB_ENV
        echo "failed_files=$failed_files" >> $GITHUB_ENV

        if [ $failed_files -gt 0 ]; then
          echo "::error::Failed to convert $failed_files file(s)"
          exit 1
        fi

    - name: Configure Git for bot commits
      if: env.no_changes != 'true' && env.updated_files != '0'
      run: |
        # Use GitHub Actions bot identity
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

    - name: Commit and push generated SVGs
      if: env.no_changes != 'true' && env.updated_files != '0'
      run: |
        set -euo pipefail
        
        echo "üì¶ Committing updated SVG files..."

        # Add the SVG files
        git add ${SVGS_PATH}/

        # Check if there are actually changes to commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è  No changes detected in SVG files"
          echo "no_commit_needed=true" >> $GITHUB_ENV
        else
          echo "üìù Committing generated SVG files..."
          
          # Get list of changed files for commit message
          mapfile -t changed_svg_files < <(git diff --staged --name-only | grep '\.svg$' || true)
          changed_count=${#changed_svg_files[@]}
          
          # Create detailed commit message
          commit_message="${COMMIT_MESSAGE_PREFIX} ${changed_count} SVG file(s) from Mermaid diagrams

          Generated from commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Triggered by: @${{ github.actor }}

          Files updated:"
          
          # Add file list (limit to 20 files to avoid huge commit messages)
          file_count=0
          for file in "${changed_svg_files[@]}"; do
            if [ $file_count -lt 20 ]; then
              commit_message="$commit_message
              - $(basename "$file")"
              file_count=$((file_count + 1))
            fi
          done
          
          if [ $changed_count -gt 20 ]; then
            commit_message="$commit_message
            ... and $((changed_count - 20)) more files"
          fi
          
          # Add skip ci flag to prevent loops (though not strictly necessary with GITHUB_TOKEN)
          commit_message="$commit_message

          [skip ci]"
          
          git commit -m "$commit_message"

          echo "üì§ Pushing SVG files to ${{ github.ref_name }}"
          
          # Push with retry logic
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if git push; then
              echo "‚úÖ SVG files committed and pushed successfully"
              break
            else
              echo "‚ö†Ô∏è  Push failed (attempt $attempt/$max_attempts)"
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting 5 seconds before retry..."
                sleep 5
                # Pull any new changes
                git pull --rebase
                attempt=$((attempt + 1))
              else
                echo "‚ùå Failed to push after $max_attempts attempts"
                exit 1
              fi
            fi
          done
        fi

    - name: No updates needed
      if: env.no_changes == 'true' || env.updated_files == '0' || env.no_commit_needed == 'true'
      run: |
        echo "‚ÑπÔ∏è  No SVG updates needed"
        echo "All SVG files are already up to date."

  generation-summary:
    runs-on: ubuntu-latest
    name: Generation Summary
    needs: [generate-svgs]
    if: always()
    permissions:
      contents: read
    steps:
    - name: Generate Summary
      run: |
        set -euo pipefail
        
        echo "# üìã Mermaid SVG Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        generation_result="${{ needs.generate-svgs.result }}"
        
        echo "## Status: $generation_result" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        case "$generation_result" in
          "success")
            echo "‚úÖ **SVG generation completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All Mermaid diagrams have been processed and SVG files have been updated." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Details:" >> $GITHUB_STEP_SUMMARY
            echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Triggered by: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
            ;;
          "skipped")
            echo "‚è≠Ô∏è **SVG generation was skipped**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Possible reasons:" >> $GITHUB_STEP_SUMMARY
            echo "- No Mermaid files were modified" >> $GITHUB_STEP_SUMMARY
            echo "- Commit contained [skip ci] flag" >> $GITHUB_STEP_SUMMARY
            echo "- Triggered by an auto-generated commit" >> $GITHUB_STEP_SUMMARY
            ;;
          *)
            echo "‚ùå **SVG generation failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Action Required:" >> $GITHUB_STEP_SUMMARY
            echo "1. Check the workflow logs for error details" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify that all Mermaid files have valid syntax" >> $GITHUB_STEP_SUMMARY
            echo "3. Test locally with:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "npm install -g @mermaid-js/mermaid-cli" >> $GITHUB_STEP_SUMMARY
            echo "npx mmdc -i your-file.mmd -o test.svg" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "::error::SVG generation failed"
            ;;
        esac
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated by Mermaid SVG Generation Workflow*" >> $GITHUB_STEP_SUMMARY