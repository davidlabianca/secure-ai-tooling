name: CoSAI Risk Map Validation

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'risk-map/yaml/**'
      - 'risk-map/schemas/**'
  push:
    branches: [main, develop]
    paths:
      - 'risk-map/yaml/**'
      - 'risk-map/schemas/**'

jobs:
  # Setup job to install dependencies and prepare validation scripts
  setup:
    runs-on: ubuntu-latest
    name: Setup Environment
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Setup Node
      uses: actions/setup-node@v5
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Copy validation scripts to working directory
      run: |
        # Copy the scripts from the repo to make them executable in CI
        cp scripts/hooks/validate_riskmap.py .
        mkdir -p riskmap_validator
        cp -r scripts/hooks/riskmap_validator/* ./riskmap_validator/
        cp scripts/hooks/validate_control_risk_references.py .

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        npm ci

    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=deps-${{ hashFiles('requirements.txt', 'package-lock.json') }}" >> $GITHUB_OUTPUT

  # Individual validation jobs that can fail independently
  schema-validation:
    runs-on: ubuntu-latest
    name: YAML Schema Validation
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Setup Node
      uses: actions/setup-node@v5
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        npm ci

    - name: Run YAML Schema Validation
      run: |
        echo "üîç Running YAML schema validation..."

        BASE_URI="file://$(pwd)/risk-map/schemas/"
        YAML_BASE_DIR="risk-map/yaml"
        SCHEMA_BASE_DIR="risk-map/schemas"
        SOURCE_FILES=("controls" "components" "personas" "risks" "self-assessment" "mermaid-styles")

        validation_failed=false

        for target in "${SOURCE_FILES[@]}"; do
          schema_file="${SCHEMA_BASE_DIR}/${target}.schema.json"
          yaml_file="${YAML_BASE_DIR}/${target}.yaml"

          if [[ -f "$yaml_file" && -f "$schema_file" ]]; then
            echo "üìÑ Validating ${yaml_file} against ${schema_file}..."

            if check-jsonschema --base-uri "$BASE_URI" --schemafile "$schema_file" "$yaml_file"; then
              echo "‚úÖ ${yaml_file} is valid"
            else
              echo "‚ùå ${yaml_file} validation failed"
              validation_failed=true
            fi
          else
            echo "‚ö†Ô∏è  Skipping ${target}: missing files"
          fi
        done

        if [ "$validation_failed" = true ]; then
          echo "::error::YAML schema validation failed"
          exit 1
        fi

        echo "‚úÖ All YAML schema validations passed"

  format-validation:
    runs-on: ubuntu-latest
    name: YAML Format Validation
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v5
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run YAML Format Validation
      run: |
        echo "üé® Running YAML format validation..."

        if npx prettier --check risk-map/yaml/*.yaml; then
          echo "‚úÖ YAML format validation completed successfully"
        else
          echo "‚ùå YAML format validation failed"
          echo "::error::YAML files are not properly formatted. Run 'npx prettier --write risk-map/yaml/*.yaml' locally."
          exit 1
        fi

  component-edge-validation:
    runs-on: ubuntu-latest
    name: Component Edge Validation
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Copy validation scripts
      run: |
        cp scripts/hooks/validate_riskmap.py .
        mkdir -p riskmap_validator
        cp -r scripts/hooks/riskmap_validator/* ./riskmap_validator/

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Run Component Edge Validation
      run: |
        echo "üîó Running component edge validation..."

        if python3 validate_riskmap.py --force; then
          echo "‚úÖ Component edge validation completed successfully"
        else
          echo "‚ùå Component edge validation failed"
          echo "::error::Component edge validation failed"
          exit 1
        fi

  control-risk-validation:
    runs-on: ubuntu-latest
    name: Control-Risk Reference Validation
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Copy validation scripts
      run: cp scripts/hooks/validate_control_risk_references.py .

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Run Control-Risk Reference Validation
      run: |
        echo "üîí Running control-to-risk reference validation..."

        if python3 validate_control_risk_references.py --force; then
          echo "‚úÖ Control-to-risk reference validation completed successfully"
        else
          echo "‚ùå Control-to-risk reference validation failed"
          echo "::error::Control-to-risk reference validation failed"
          exit 1
        fi

  graph-validation:
    runs-on: ubuntu-latest
    name: Graph Validation
    needs: setup
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Copy validation scripts
      run: |
        cp scripts/hooks/validate_riskmap.py .
        mkdir -p riskmap_validator
        cp -r scripts/hooks/riskmap_validator/* ./riskmap_validator/

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Validate graphs
      run: |
        # Setup temporary files and paths
        RISK_MAP_TEMP_FILE=$(mktemp)
        CONTROLS_TEMP_FILE=$(mktemp)
        RISKMAP_PATH="./risk-map/docs/risk-map-graph.md"
        CONTROL_GRAPH_PATH="./risk-map/docs/controls-graph.md"
        VALIDATE_CMD="validate_riskmap.py"

        # Define graph configurations as arrays
        GRAPH_NAMES=("Component Graph" "Control Graph")
        TEMP_FILES=("${RISK_MAP_TEMP_FILE}" "${CONTROLS_TEMP_FILE}")
        TARGET_PATHS=("${RISKMAP_PATH}" "${CONTROL_GRAPH_PATH}")
        GENERATE_ARGS=("--to-graph" "--to-controls-graph")

        graph_compare_failed=false

        # Loop through both graph types
        for i in "${!GRAPH_NAMES[@]}"; do
            graph_name="${GRAPH_NAMES[$i]}"
            temp_file="${TEMP_FILES[$i]}"
            target_path="${TARGET_PATHS[$i]}"
            gen_args="${GENERATE_ARGS[$i]}"

            echo "üîç Validating ${graph_name}..."

            if ! python3 ${VALIDATE_CMD} --force ${gen_args} "${temp_file}"; then
                echo "‚ùå ${graph_name} generation via ${VALIDATE_CMD} failed..."
                graph_compare_failed=true
            elif ! output=$(diff -u "${target_path}" "${temp_file}" 2>&1); then
                echo "‚ùå Generated ${graph_name,,} does not match PR ${graph_name,,}..."
                echo "::error title=Files differ::Differences found in ${graph_name}"
                echo "::group::${graph_name} Diff Output"
                echo "${output}"
                echo "::endgroup::"
                graph_compare_failed=true
            else
                echo "‚úÖ Generated ${graph_name,,} matches ${target_path}"
            fi
        done

        # Cleanup temp files
        rm -f ${RISK_MAP_TEMP_FILE}
        rm -f ${CONTROLS_TEMP_FILE}

        if [ "$graph_compare_failed" = true ]; then
          echo "::error::Graph validation failed"
          exit 1
        fi

        echo "‚úÖ All graph validations passed"

  # Summary job that requires all other jobs but doesn't fail
  validation-summary:
    runs-on: ubuntu-latest
    name: Validation Summary
    needs: [schema-validation, format-validation, component-edge-validation, control-risk-validation, graph-validation]
    if: always()
    steps:
    - name: Generate Summary
      run: |
        echo "üìã CoSAI Risk Map Validation Summary:"
        echo ""

        # Check individual job results
        schema_result="${{ needs.schema-validation.result }}"
        format_result="${{ needs.format-validation.result }}"
        edge_result="${{ needs.component-edge-validation.result }}"
        control_result="${{ needs.control-risk-validation.result }}"
        graph_result="${{ needs.graph-validation.result }}"

        overall_success=true

        if [ "$schema_result" = "success" ]; then
          echo "  ‚úÖ YAML schema validation"
        else
          echo "  ‚ùå YAML schema validation ($schema_result)"
          overall_success=false
        fi

        if [ "$format_result" = "success" ]; then
          echo "  ‚úÖ YAML format validation"
        else
          echo "  ‚ùå YAML format validation ($format_result)"
          overall_success=false
        fi

        if [ "$edge_result" = "success" ]; then
          echo "  ‚úÖ Component edge validation"
        else
          echo "  ‚ùå Component edge validation ($edge_result)"
          overall_success=false
        fi

        if [ "$control_result" = "success" ]; then
          echo "  ‚úÖ Control-to-risk reference validation"
        else
          echo "  ‚ùå Control-to-risk reference validation ($control_result)"
          overall_success=false
        fi

        if [ "$graph_result" = "success" ]; then
          echo "  ‚úÖ Graph validation (component & control graphs)"
        else
          echo "  ‚ùå Graph validation ($graph_result)"
          overall_success=false
        fi

        echo ""
        if [ "$overall_success" = "true" ]; then
          echo "üéâ All validations passed!"
        else
          echo "üí• Some validations failed. Check individual job details above."
          exit 1
        fi