name: CoSAI Risk Map Validation

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'risk-map/yaml/**'
      - 'risk-map/schemas/**'
  push:
    branches: [main, develop]
    paths:
      - 'risk-map/yaml/**'
      - 'risk-map/schemas/**'

jobs: 
  validate-risk-map:
    runs-on: ubuntu-latest
    name: Validate Risk Map Data
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Setup Node
      uses: actions/setup-node@v5 
      with: 
        node-version: '22.x'
        cache: 'npm'     

    - name: Copy validation scripts to working directory
      run: |
        # Copy the scripts from the repo to make them executable in CI
        cp scripts/hooks/validate_component_edges.py .
        cp scripts/hooks/validate_control_risk_references.py .

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        npm ci  # or npm install'
        
    - name: Run YAML Schema Validation
      run: |
        echo "üîç Running YAML schema validation..."
        
        BASE_URI="file://$(pwd)/risk-map/schemas/"
        YAML_BASE_DIR="risk-map/yaml"
        SCHEMA_BASE_DIR="risk-map/schemas"
        SOURCE_FILES=("controls" "components" "personas" "risks" "self-assessment")
        
        validation_failed=false
        
        for target in "${SOURCE_FILES[@]}"; do
          schema_file="${SCHEMA_BASE_DIR}/${target}.schema.json"
          yaml_file="${YAML_BASE_DIR}/${target}.yaml"
          
          if [[ -f "$yaml_file" && -f "$schema_file" ]]; then
            echo "Validating $yaml_file against $schema_file..."
            if ! check-jsonschema --base-uri "$BASE_URI" --schemafile "$schema_file" "$yaml_file"; then
              echo "‚ùå Schema validation failed for ${target}.yaml"
              validation_failed=true
            else
              echo "‚úÖ Schema validation passed for ${target}.yaml"
            fi
          else
            echo "‚ö†Ô∏è Skipping ${target} - missing file(s)"
          fi
        done
        
        # Store schema validation result for final summary
        echo "SCHEMA_VALIDATION_FAILED=$validation_failed" >> $GITHUB_ENV
        
        if [ "$validation_failed" = true ]; then
          echo "::error::YAML schema validation failed"
        else
          echo "üéâ All YAML schema validations passed!"
        fi
        
    - name: Run YAML Formatting Validation
      run: |
        echo "üé® Running prettier format validation on YAML files..."
    
        formatting_failed=false

        YAML_BASE_DIR="./risk-map/yaml/"
        PRETTIER_CMD="npx prettier"
        PRETTIER_ARGS="--list-different"

        # Set PRETTIER_EXPERIMENTAL_CLI due to a bug in 3.6.x's --list-different 
        export PRETTIER_EXPERIMENTAL_CLI=1
        if ! output=$($PRETTIER_CMD $PRETTIER_ARGS $YAML_BASE_DIR 2>&1); then
          echo "   ‚ùå Prettier formatting failed for: ${output//$'\n'/, }"
          formatting_failed=true
        else
            echo "   ‚úÖ All YAML files formatted successfully"
        fi
        
        # Store formatting validation result for final summary
        echo "FORMATTING_VALIDATION_FAILED=$formatting_failed" >> $GITHUB_ENV
        
        if [ "$formatting_failed" = true ]; then
          echo "::error::YAML formatting validation failed"
        fi

    - name: Run Component Edge Validation
      run: |
        echo "üîó Running component edge validation..."
        
        edge_validation_failed=false
        
        if python3 validate_component_edges.py --force; then
          echo "‚úÖ Component edge validation completed successfully"
        else
          echo "‚ùå Component edge validation failed"
          edge_validation_failed=true
        fi
        
        # Store edge validation result for final summary
        echo "EDGE_VALIDATION_FAILED=$edge_validation_failed" >> $GITHUB_ENV
        
        if [ "$edge_validation_failed" = true ]; then
          echo "::error::Component edge validation failed"
        fi
        
    - name: Run Control-Risk Reference Validation
      run: |
        echo "üîó Running control-to-risk reference validation..."
        
        control_risk_validation_failed=false
        
        if python3 validate_control_risk_references.py --force; then
          echo "‚úÖ Control-to-risk reference validation completed successfully"
        else
          echo "‚ùå Control-to-risk reference validation failed"
          control_risk_validation_failed=true
        fi
        
        # Store control-risk validation result for final summary
        echo "CONTROL_RISK_VALIDATION_FAILED=$control_risk_validation_failed" >> $GITHUB_ENV
        
        if [ "$control_risk_validation_failed" = true ]; then
          echo "::error::Control-to-risk reference validation failed"
        fi
    
    - name: Validation Summary
      if: always()
      run: |
        echo "üìã CoSAI Risk Map Validation Summary:"
        
        overall_failed=false
        
        # Check each validation result
        if [ "$SCHEMA_VALIDATION_FAILED" = "true" ]; then
          echo "  ‚ùå YAML schema validation"
          overall_failed=true
        else
          echo "  ‚úÖ YAML schema validation"
        fi
        
        if [ "$FORMATTING_VALIDATION_FAILED" = "true" ]; then
          echo "  ‚ùå YAML format validation"
          overall_failed=true
        else
          echo "  ‚úÖ YAML format validation"
        fi
        
        if [ "$EDGE_VALIDATION_FAILED" = "true" ]; then
          echo "  ‚ùå Component edge validation"
          overall_failed=true
        else
          echo "  ‚úÖ Component edge validation"
        fi
        
        if [ "$CONTROL_RISK_VALIDATION_FAILED" = "true" ]; then
          echo "  ‚ùå Control-to-risk reference validation"
          overall_failed=true
        else
          echo "  ‚úÖ Control-to-risk reference validation"
        fi
        
        echo ""
        if [ "$overall_failed" = "true" ]; then
          echo "üí• One or more validations failed. Please review the errors above."
          echo "::error::Risk Map validation failed - see summary above"
          exit 1
        else
          echo "üéâ All CoSAI Risk Map validations completed successfully!"
          echo "The Risk Map data maintains full integrity and consistency."
        fi

